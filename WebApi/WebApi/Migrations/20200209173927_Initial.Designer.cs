// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using loadMaxmind.Model;

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200209173927_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("loadMaxmind.Model.CountryLocation", b =>
                {
                    b.Property<long>("GeonameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContinentCode")
                        .HasColumnType("text");

                    b.Property<string>("ContinentName")
                        .HasColumnType("text");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<string>("IsInEuropeanUnion")
                        .HasColumnType("text");

                    b.Property<string>("LocaleCode")
                        .HasColumnType("text");

                    b.HasKey("GeonameId");

                    b.ToTable("CountryLocations");
                });

            modelBuilder.Entity("loadMaxmind.Model.Ipv4bloc", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("CountryLocationGeonameId")
                        .HasColumnType("bigint");

                    b.Property<long>("GeonameId")
                        .HasColumnType("bigint");

                    b.Property<long>("IpMax")
                        .HasColumnType("bigint");

                    b.Property<long>("IpMin")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAnonymousProxy")
                        .HasColumnType("text");

                    b.Property<string>("IsSatelliteProvider")
                        .HasColumnType("text");

                    b.Property<string>("Network")
                        .HasColumnType("text");

                    b.Property<long?>("RegisteredCountryGeonameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RepresentedCountryGeonameId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CountryLocationGeonameId");

                    b.ToTable("Ipv4bloc");
                });

            modelBuilder.Entity("loadMaxmind.Model.Ipv4bloc", b =>
                {
                    b.HasOne("loadMaxmind.Model.CountryLocation", "CountryLocation")
                        .WithMany()
                        .HasForeignKey("CountryLocationGeonameId");
                });
#pragma warning restore 612, 618
        }
    }
}
