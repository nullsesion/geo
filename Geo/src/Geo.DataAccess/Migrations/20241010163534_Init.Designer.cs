// <auto-generated />
using System;
using Geo.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Geo.DataAccess.Migrations
{
    [DbContext(typeof(GeoApiDbContext))]
    [Migration("20241010163534_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Geo.DataAccess.Entities.CityLocationEntity", b =>
                {
                    b.Property<int>("GeonameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("geoname_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeonameId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("continent_code");

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("continent_name");

                    b.Property<string>("CountryIsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_iso_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<bool>("IsInEuropeanUnion")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_european_union");

                    b.Property<int?>("MetroCode")
                        .HasColumnType("integer")
                        .HasColumnName("metro_code");

                    b.Property<string>("Subdivision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subdivision");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.HasKey("GeonameId")
                        .HasName("pk_city_locations");

                    b.ToTable("city_locations", (string)null);
                });

            modelBuilder.Entity("Geo.DataAccess.Entities.CountryIPv4Entity", b =>
                {
                    b.Property<string>("Network")
                        .HasColumnType("text")
                        .HasColumnName("network");

                    b.Property<int?>("GeonameId")
                        .HasColumnType("integer")
                        .HasColumnName("geoname_id");

                    b.Property<int>("IpMax")
                        .HasColumnType("integer")
                        .HasColumnName("ip_max");

                    b.Property<int>("IpMin")
                        .HasColumnType("integer")
                        .HasColumnName("ip_min");

                    b.Property<bool>("IsAnonymousProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous_proxy");

                    b.Property<bool?>("IsAnycast")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anycast");

                    b.Property<bool>("IsSatelliteProvider")
                        .HasColumnType("boolean")
                        .HasColumnName("is_satellite_provider");

                    b.Property<int?>("RegisteredCountryGeoNameId")
                        .HasColumnType("integer")
                        .HasColumnName("registered_country_geo_name_id");

                    b.Property<int?>("RepresentedCountryGeoNameId")
                        .HasColumnType("integer")
                        .HasColumnName("represented_country_geo_name_id");

                    b.HasKey("Network")
                        .HasName("pk_country_i_pv4s");

                    b.HasIndex("GeonameId")
                        .HasDatabaseName("ix_country_i_pv4s_geoname_id");

                    b.HasIndex("IpMax")
                        .HasDatabaseName("ix_country_i_pv4s_ip_max");

                    b.HasIndex("IpMin")
                        .HasDatabaseName("ix_country_i_pv4s_ip_min");

                    b.HasIndex("RegisteredCountryGeoNameId")
                        .HasDatabaseName("ix_country_i_pv4s_registered_country_geo_name_id");

                    b.HasIndex("RepresentedCountryGeoNameId")
                        .HasDatabaseName("ix_country_i_pv4s_represented_country_geo_name_id");

                    b.ToTable("country_i_pv4s", (string)null);
                });

            modelBuilder.Entity("Geo.DataAccess.Entities.CountryLocationEntity", b =>
                {
                    b.Property<int>("GeonameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("geoname_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeonameId"));

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("continent_code");

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("continent_name");

                    b.Property<string>("CountryIsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_iso_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("country_name");

                    b.Property<bool>("IsInEuropeanUnion")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_european_union");

                    b.HasKey("GeonameId")
                        .HasName("pk_country_locations");

                    b.ToTable("country_locations", (string)null);
                });

            modelBuilder.Entity("GeoLoad.Entities.CityIPv4Entity", b =>
                {
                    b.Property<string>("Network")
                        .HasColumnType("text")
                        .HasColumnName("network");

                    b.Property<int?>("AccuracyRadius")
                        .HasColumnType("integer")
                        .HasColumnName("accuracy_radius");

                    b.Property<int?>("GeonameId")
                        .HasColumnType("integer")
                        .HasColumnName("geoname_id");

                    b.Property<int>("IpMax")
                        .HasColumnType("integer")
                        .HasColumnName("ip_max");

                    b.Property<int>("IpMin")
                        .HasColumnType("integer")
                        .HasColumnName("ip_min");

                    b.Property<bool>("IsAnonymousProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous_proxy");

                    b.Property<bool?>("IsAnycast")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anycast");

                    b.Property<bool>("IsSatelliteProvider")
                        .HasColumnType("boolean")
                        .HasColumnName("is_satellite_provider");

                    b.Property<NpgsqlPoint?>("Location")
                        .HasColumnType("point")
                        .HasColumnName("location");

                    b.Property<int?>("RegisteredCountryGeoNameId")
                        .HasColumnType("integer")
                        .HasColumnName("registered_country_geo_name_id");

                    b.Property<int?>("RepresentedCountryGeoNameId")
                        .HasColumnType("integer")
                        .HasColumnName("represented_country_geo_name_id");

                    b.HasKey("Network")
                        .HasName("pk_city_i_pv4s");

                    b.HasIndex("GeonameId")
                        .HasDatabaseName("ix_city_i_pv4s_geoname_id");

                    b.HasIndex("IpMax")
                        .HasDatabaseName("ix_city_i_pv4s_ip_max");

                    b.HasIndex("IpMin")
                        .HasDatabaseName("ix_city_i_pv4s_ip_min");

                    b.HasIndex("RegisteredCountryGeoNameId")
                        .HasDatabaseName("ix_city_i_pv4s_registered_country_geo_name_id");

                    b.HasIndex("RepresentedCountryGeoNameId")
                        .HasDatabaseName("ix_city_i_pv4s_represented_country_geo_name_id");

                    b.ToTable("city_i_pv4s", (string)null);
                });

            modelBuilder.Entity("Geo.DataAccess.Entities.CountryIPv4Entity", b =>
                {
                    b.HasOne("Geo.DataAccess.Entities.CountryLocationEntity", "Geoname")
                        .WithMany()
                        .HasForeignKey("GeonameId")
                        .HasConstraintName("fk_country_i_pv4s_country_locations_geoname_id");

                    b.HasOne("Geo.DataAccess.Entities.CountryLocationEntity", "RegisteredCountryGeoName")
                        .WithMany()
                        .HasForeignKey("RegisteredCountryGeoNameId")
                        .HasConstraintName("fk_country_i_pv4s_country_locations_registered_country_geo_nam");

                    b.HasOne("Geo.DataAccess.Entities.CountryLocationEntity", "RepresentedCountryGeoName")
                        .WithMany()
                        .HasForeignKey("RepresentedCountryGeoNameId")
                        .HasConstraintName("fk_country_i_pv4s_country_locations_represented_country_geo_na");

                    b.Navigation("Geoname");

                    b.Navigation("RegisteredCountryGeoName");

                    b.Navigation("RepresentedCountryGeoName");
                });

            modelBuilder.Entity("GeoLoad.Entities.CityIPv4Entity", b =>
                {
                    b.HasOne("Geo.DataAccess.Entities.CityLocationEntity", "Geoname")
                        .WithMany()
                        .HasForeignKey("GeonameId")
                        .HasConstraintName("fk_city_i_pv4s_city_locations_geoname_id");

                    b.HasOne("Geo.DataAccess.Entities.CityLocationEntity", "RegisteredCountryGeoName")
                        .WithMany()
                        .HasForeignKey("RegisteredCountryGeoNameId")
                        .HasConstraintName("fk_city_i_pv4s_city_locations_registered_country_geo_name_id");

                    b.HasOne("Geo.DataAccess.Entities.CityLocationEntity", "RepresentedCountryGeoName")
                        .WithMany()
                        .HasForeignKey("RepresentedCountryGeoNameId")
                        .HasConstraintName("fk_city_i_pv4s_city_locations_represented_country_geo_name_id");

                    b.Navigation("Geoname");

                    b.Navigation("RegisteredCountryGeoName");

                    b.Navigation("RepresentedCountryGeoName");
                });
#pragma warning restore 612, 618
        }
    }
}
